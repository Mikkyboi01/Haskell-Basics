
-- HC8T1: Type Synonyms and Basic Function
type Address = String
type Value = Int

generateTx :: Address -> Address -> Value -> String
generateTx from to val = "From: " ++ from ++ ", To: " ++ to ++ ", Value: " ++ show val

-- HC8T2: New Types and Data Constructors
data PaymentMethod = Cash | Card | Cryptocurrency
  deriving (Show)

data PersonHC8T2 = PersonHC8T2
  { nameHC8T2 :: String
  , addressHC8T2 :: (String, Int)  -- (Street, Number)
  , paymentMethod :: PaymentMethod
  } deriving (Show)

bob :: PersonHC8T2
bob = PersonHC8T2 "Bob" ("123 Main St", 42) Cash

-- HC8T3: Algebraic Data Types and Functions
data ShapeHC8T3 = Circle Float | Rectangle Float Float
  deriving (Show)

area :: ShapeHC8T3 -> Float
area (Circle r) = pi * r * r
area (Rectangle w h) = w * h

-- HC8T4: Record Syntax for Employee
data Employee = Employee
  { empName :: String
  , experienceInYears :: Float
  } deriving (Show)

richard :: Employee
richard = Employee "Richard" 7.5

-- HC8T5: Record Syntax for Person
data PersonHC8T5 = PersonHC8T5
  { personName :: String
  , personAge :: Int
  , isEmployed :: Bool
  } deriving (Show)

person1 :: PersonHC8T5
person1 = PersonHC8T5 "Alice" 30 True

person2 :: PersonHC8T5
person2 = PersonHC8T5 "Eve" 25 False

-- HC8T6: Record Syntax for Shape Variants
data ShapeHC8T6 = CircleShape
  { center :: (Float, Float)
  , color :: String
  , radius :: Float
  }
  | RectangleShape
  { width :: Float
  , height :: Float
  , color :: String
  }
  deriving (Show)

circleInstance :: ShapeHC8T6
circleInstance = CircleShape (0,0) "Red" 10.0

rectangleInstance :: ShapeHC8T6
rectangleInstance = RectangleShape 5.0 10.0 "Blue"

-- HC8T7: Data Types and Describing Animals
data Animal = Dog String | Cat String
  deriving (Show)

describeAnimal :: Animal -> String
describeAnimal (Dog name) = name ++ " is a dog."
describeAnimal (Cat name) = name ++ " is a cat."

dog1 :: Animal
dog1 = Dog "Rex"

cat1 :: Animal
cat1 = Cat "Whiskers"

-- HC8T8: Type Synonyms and Greeting Function
type Name = String
type Age = Int

greet :: Name -> Age -> String
greet n a = "Hello, " ++ n ++ "! You are " ++ show a ++ " years old."

-- HC8T9: Record Type and Transaction Function
data Transaction = Transaction
  { from :: Address
  , to :: Address
  , amount :: Value
  , transactionId :: String
  } deriving (Show)

createTransaction :: Address -> Address -> Value -> String
createTransaction f t val = 
  let txId = f ++ "-" ++ t ++ "-" ++ show val
      _transaction = Transaction f t val txId
  in txId

-- HC8T10: Deriving Show for Book
data Book = Book
  { title :: String
  , author :: String
  , year :: Int
  } deriving (Show)

myBook :: Book
myBook = Book "Learn You a Haskell" "Miran Lipovaca" 2011

-- Main to test all
main :: IO ()
main = do
  putStrLn "-- HC8T1 --"
  putStrLn $ generateTx "Alice" "Bob" 100

  putStrLn "\n-- HC8T2 --"
  print bob

  putStrLn "\n-- HC8T3 --"
  print $ area (Circle 5)
  print $ area (Rectangle 10 5)

  putStrLn "\n-- HC8T4 --"
  print richard

  putStrLn "\n-- HC8T5 --"
  print person1
  print person2

  putStrLn "\n-- HC8T6 --"
  print circleInstance
  print rectangleInstance

  putStrLn "\n-- HC8T7 --"
  putStrLn $ describeAnimal dog1
  putStrLn $ describeAnimal cat1

  putStrLn "\n-- HC8T8 --"
  putStrLn $ greet "John" 25

  putStrLn "\n-- HC8T9 --"
  putStrLn $ createTransaction "Alice" "Bob" 200

  putStrLn "\n-- HC8T10 --"
  print myBook
