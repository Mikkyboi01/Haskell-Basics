
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- HC10T1: ShowSimple Type Class
class ShowSimple a where
  showSimple :: a -> String

data PaymentMethod = Cash | Card | Cryptocurrency deriving (Show, Eq, Ord)

instance ShowSimple PaymentMethod where
  showSimple Cash          = "Cash"
  showSimple Card          = "Card"
  showSimple Cryptocurrency = "Cryptocurrency"

-- HC10T2: Summable Type Class
class Summable a where
  sumUp :: [a] -> a

instance Summable Int where
  sumUp = sum

-- HC10T3: Comparable Type Class
class Comparable a where
  compareWith :: a -> a -> Ordering

data Blockchain = Bitcoin | Ethereum | Cardano deriving (Show)

instance Comparable Blockchain where
  compareWith Bitcoin Bitcoin   = EQ
  compareWith Bitcoin _         = LT
  compareWith Ethereum Bitcoin  = GT
  compareWith Ethereum Ethereum = EQ
  compareWith Ethereum Cardano  = LT
  compareWith Cardano Cardano   = EQ
  compareWith Cardano _         = GT

-- HC10T4: Eq Instance for Box
data Box a = Empty | Has a deriving (Show)

instance (Eq a) => Eq (Box a) where
  Empty == Empty = True
  (Has x) == (Has y) = x == y
  _ == _ = False

-- HC10T5: ShowDetailed Type Class
data User = User { userName :: String, userAge :: Int } deriving Show

class ShowDetailed a where
  showDetailed :: a -> String

instance ShowDetailed User where
  showDetailed (User name age) = "User: " ++ name ++ ", Age: " ++ show age

-- âœ… HC10T6: Mutual Recursion in Eq for Blockchain
instance Eq Blockchain where
  x == y = not (x /= y)
  x /= y = case (x, y) of
    (Bitcoin, Bitcoin)   -> False
    (Ethereum, Ethereum) -> False
    (Cardano, Cardano)   -> False
    _                    -> True

-- HC10T7: Convertible Type Class
class Convertible a b where
  convert :: a -> b

instance Convertible PaymentMethod String where
  convert = showSimple

-- HC10T8: AdvancedEq Subclass of Eq
class Eq a => AdvancedEq a where
  compareEquality :: a -> a -> Bool

instance AdvancedEq Blockchain where
  compareEquality x y = x == y

-- HC10T9: MinMax Type Class
class MinMax a where
  minValue :: a
  maxValue :: a

instance MinMax Int where
  minValue = minBound
  maxValue = maxBound

-- HC10T10: Concatenatable Type Class
class Concatenatable a where
  concatWith :: a -> a -> a

instance Concatenatable String where
  concatWith = (++)

-- Main function to test
main :: IO ()
main = do
  putStrLn "-- HC10T1: ShowSimple --"
  print $ showSimple Cash
  print $ showSimple Cryptocurrency

  putStrLn "\n-- HC10T2: Summable --"
  print (sumUp [1 :: Int, 2, 3, 4, 5])

  putStrLn "\n-- HC10T3: Comparable --"
  print $ compareWith Bitcoin Ethereum
  print $ compareWith Cardano Bitcoin

  putStrLn "\n-- HC10T4: Eq Box --"
  print $ (Has 5 :: Box Int) == (Has 5)
  print $ (Has 5 :: Box Int) == Empty

  putStrLn "\n-- HC10T5: ShowDetailed --"
  print $ showDetailed (User "Alice" 30)

  putStrLn "\n-- HC10T6: Mutual Recursion Eq --"
  print $ Bitcoin == Ethereum
  print $ Bitcoin /= Ethereum
  print $ Bitcoin == Bitcoin

  putStrLn "\n-- HC10T7: Convertible --"
  print (convert Card :: String)

  putStrLn "\n-- HC10T8: AdvancedEq --"
  print $ compareEquality Bitcoin Bitcoin
  print $ compareEquality Bitcoin Cardano

  putStrLn "\n-- HC10T9: MinMax --"
  print (minValue :: Int)
  print (maxValue :: Int)

  putStrLn "\n-- HC10T10: Concatenatable --"
  print $ concatWith "Hello, " "World!"
