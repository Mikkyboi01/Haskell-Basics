-- HC4T1: weatherReport using pattern matching
weatherReport :: String -> String
weatherReport "sunny"  = "It's a bright and beautiful day!"
weatherReport "rainy"  = "Don't forget your umbrella!"
weatherReport "cloudy" = "A bit gloomy, but no rain yet!"
weatherReport _        = "Weather unknown"

-- HC4T2: dayType using pattern matching
dayType :: String -> String
dayType "Saturday" = "It's a weekend!"
dayType "Sunday"   = "It's a weekend!"
dayType "Monday"   = "It's a weekday."
dayType "Tuesday"  = "It's a weekday."
dayType "Wednesday"= "It's a weekday."
dayType "Thursday" = "It's a weekday."
dayType "Friday"   = "It's a weekday."
dayType _          = "Invalid day"

-- HC4T3: gradeComment using pattern matching and guards
gradeComment :: Int -> String
gradeComment n
  | n >= 90 && n <= 100 = "Excellent!"
  | n >= 70 && n <= 89  = "Good job!"
  | n >= 50 && n <= 69  = "You passed."
  | n >= 0  && n <= 49  = "Better luck next time."
  | otherwise           = "Invalid grade"

-- HC4T4 and HC4T5: specialBirthday rewritten with pattern matching including catch-all
specialBirthday :: Int -> String
specialBirthday 1 = "Happy 1st birthday!"
specialBirthday 13 = "Happy teenage years!"
specialBirthday 18 = "Welcome to adulthood!"
specialBirthday age = "Happy birthday, you are " ++ show age ++ " years old!"

-- HC4T6: whatsInsideThisList using pattern matching on list length
whatsInsideThisList :: [a] -> String
whatsInsideThisList []       = "The list is empty."
whatsInsideThisList [_]      = "The list has one element."
whatsInsideThisList [_, _]   = "The list has two elements."
whatsInsideThisList _        = "The list has many elements."

-- HC4T7: firstAndThird returns first and third elements ignoring others
firstAndThird :: [a] -> Maybe (a, a)
firstAndThird (x:_:z:_) = Just (x, z)
firstAndThird _         = Nothing

-- HC4T8: describeTuple extracts values from a tuple and formats a string
describeTuple :: (String, Int, Bool) -> String
describeTuple (name, age, employed) =
  name ++ " is " ++ show age ++ " years old and is " ++
  (if employed then "employed." else "not employed.")

-- Main to test all functions
main :: IO ()
main = do
  putStrLn "-- HC4T1: weatherReport --"
  print $ weatherReport "sunny"
  print $ weatherReport "foggy"

  putStrLn "\n-- HC4T2: dayType --"
  print $ dayType "Sunday"
  print $ dayType "Wednesday"
  print $ dayType "Funday"

  putStrLn "\n-- HC4T3: gradeComment --"
  print $ gradeComment 95
  print $ gradeComment 75
  print $ gradeComment 55
  print $ gradeComment 30
  print $ gradeComment 150

  putStrLn "\n-- HC4T4 & HC4T5: specialBirthday --"
  print $ specialBirthday 1
  print $ specialBirthday 13
  print $ specialBirthday 18
  print $ specialBirthday 25

  putStrLn "\n-- HC4T6: whatsInsideThisList --"
  print $ whatsInsideThisList ([] :: [Int])
  print $ whatsInsideThisList [1]
  print $ whatsInsideThisList [1, 2]
  print $ whatsInsideThisList [1, 2, 3, 4]

  putStrLn "\n-- HC4T7: firstAndThird --"
  print $ firstAndThird [1,2,3,4]
  print $ firstAndThird [1,2]
  print $ firstAndThird ([] :: [Int])

  putStrLn "\n-- HC4T8: describeTuple --"
  print $ describeTuple ("Alice", 30, True)
  print $ describeTuple ("Bob", 45, False)
