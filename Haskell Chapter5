
import Data.Char (isUpper)

-- HC5T1: applyThrice - applies a function three times to an integer
applyThrice :: (Int -> Int) -> Int -> Int
applyThrice f x = f (f (f x))

-- HC5T2: filter odd numbers from 1 to 30
oddNumbers :: [Int]
oddNumbers = filter odd [1..30]

-- HC5T3: Check if any word starts with uppercase letter
startsWithUpper :: String -> Bool
startsWithUpper [] = False
startsWithUpper (c:_) = isUpper c

anyStartsWithUpper :: [String] -> Bool
anyStartsWithUpper = any startsWithUpper

-- HC5T4: Rewrite biggerThan10 using lambda
biggerThan10 :: Int -> Bool
biggerThan10 = \x -> x > 10

-- HC5T5: Partial application multiplyByFive
multiplyByFive :: Int -> Int
multiplyByFive = (* 5)

-- HC5T6: Function composition: squares then filters evens
squaresOfEvens :: [Int] -> [Int]
squaresOfEvens = filter even . map (^2)

-- HC5T7: Use $ operator to rewrite
result :: Int
result = sum $ map (*2) $ filter (>3) [1..10]

-- HC5T8: Point-free style of addFive
addFive :: Int -> Int
addFive = (+5)

-- HC5T9: transformList applies a function twice to each element
transformList :: (a -> a) -> [a] -> [a]
transformList f = map (f . f)

-- HC5T10: Combine filter, map, any: check if any squared > 50
anySquaredGreaterThan50 :: [Int] -> Bool
anySquaredGreaterThan50 = any (>50) . map (^2)

-- Main to test outputs
main :: IO ()
main = do
  putStrLn "-- HC5T1: applyThrice --"
  print $ applyThrice (+1) 5         -- 8
  print $ applyThrice (*2) 2         -- 16

  putStrLn "\n-- HC5T2: oddNumbers --"
  print oddNumbers                   -- [1,3,5,...29]

  putStrLn "\n-- HC5T3: anyStartsWithUpper --"
  print $ anyStartsWithUpper ["hello", "World"] -- True
  print $ anyStartsWithUpper ["hello", "world"] -- False

  putStrLn "\n-- HC5T4: biggerThan10 --"
  print $ biggerThan10 9             -- False
  print $ biggerThan10 15            -- True

  putStrLn "\n-- HC5T5: multiplyByFive --"
  print $ multiplyByFive 7           -- 35

  putStrLn "\n-- HC5T6: squaresOfEvens --"
  print $ squaresOfEvens [1..10]    -- [4,16,36,64,100]

  putStrLn "\n-- HC5T7: result using $ operator --"
  print result                      -- 64

  putStrLn "\n-- HC5T8: addFive (point-free) --"
  print $ addFive 10                -- 15

  putStrLn "\n-- HC5T9: transformList --"
  print $ transformList (+1) [1,2,3] -- [3,4,5]

  putStrLn "\n-- HC5T10: anySquaredGreaterThan50 --"
  print $ anySquaredGreaterThan50 [1..7]  -- True (since 7^2=49 not >50, but 8^2=64 would be)
  print $ anySquaredGreaterThan50 [1..6]  -- False
